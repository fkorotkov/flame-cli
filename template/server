#!/usr/bin/env ruby

# frozen_string_literal: true

require 'shellwords'
require 'English'
require 'yaml'
require 'fileutils'

CONFIGS_DIR = File.join(__dir__, 'configs')

SERVER_CONFIG = YAML.load_file File.join(CONFIGS_DIR, 'server.yaml')

ENVIRONMENT = ENV['RACK_ENV'] || SERVER_CONFIG[:environment]

puts "ENVIRONMENT : #{ENVIRONMENT}"

PUMA_PID_FILE = File.join(
	__dir__, *SERVER_CONFIG[ENVIRONMENT].values_at(:pids_dir, :pid_file)
)

## Class for pids files
class PidsFile
	def initialize(name, *pids)
		@file = File.join PIDS_DIR, "#{name}.pids"
		@pids = pids.any? ? pids : read
	end

	def dump(pids = @pids)
		FileUtils.mkdir_p PIDS_DIR
		puts "PidsFile dump : #{pids} => #{@file}"
		File.write @file, pids.join($RS)
	end

	def read
		return unless File.exist?(@file)

		@pids = File.read(@file).split($RS).map(&:to_i)
		puts "PidsFile read : #{@pids}"
		@pids
	end

	def kill_each(pids = @pids)
		Array(pids).each do |pid|
			puts "PidsFile kill : #{pid}"
			Process.kill('TERM', -Process.getpgid(pid))
		rescue Errno::ESRCH
			puts "Process #{pid} doesn't exist"
		end
		self
	end

	def delete
		return unless File.exist?(@file)

		File.delete @file
	end
end

PidsFile::PIDS_DIR = SERVER_CONFIG[ENVIRONMENT][:pids_dir]

def show_usage
	puts <<~USAGE
		Usage: ./server COMMAND

		  COMMAND is one of:
		      start - Start server
		       stop - Stop server
		       kill - Kill server (and filewatcher)
		    restart - Restart server
		    monitor - Show logs
		      devel - Restart and monitor server
		         ps - Show processes of server
	USAGE
end

def bash(command, print: true)
	puts command if print
	system bash_command(command)
end

def bash_command(command)
	escaped_command = Shellwords.escape(command)
	"bash -c #{escaped_command}"
end

def bash_spawn(command, print: true)
	puts "spawn #{command}" if print
	spawn bash_command(command), pgroup: true
end

def server(command)
	if %i[start restart].include?(command) &&
	   !(dependencies_check && assets_build)
		exit
	end
	if %i[stop restart].include?(command)
		filewatcher_pids_file = PidsFile.new(:filewatcher)
		filewatcher_pids_file.kill_each.delete
	end
	web_server(command)
end

def puma_command(command)
	bash "bundle exec pumactl -F #{File.join(CONFIGS_DIR, 'puma.rb')} #{command}"
end

def web_server(command)
	if ENVIRONMENT == 'development' && command == :restart
		return development_restart
	end

	waiting_mailing_lock if %i[stop restart phased-restart].include?(command)
	puma_command command
end

def development_restart
	filewatcher_pids =
		development_filewatchers.map { |command| bash_spawn command }

	PidsFile.new(:filewatcher, filewatcher_pids).dump

	puma_command File.exist?(PUMA_PID_FILE) ? 'restart' : 'start'
rescue SystemExit, Interrupt => e
	PidsFile.new(:filewatcher).kill_each.delete

	raise e
end

def filewatcher_command(pattern, execute, exclude: nil)
	<<-CMD.split.join(' ')
		bundle exec "
			filewatcher
				'#{pattern}'
				#{"--exclude '#{exclude}'" unless exclude.nil?}
				'#{execute}'
		"
	CMD
end

def development_filewatchers
	YAML.load_file(File.join(__dir__, 'filewatchers.yaml')).map do |args|
		filewatcher_command args[:pattern], args[:command], exclude: args[:exclude]
	end
end

def waiting_mailing_lock
	while Dir[File.join(__dir__, 'tmp', 'mailing_*')].any?
		puts "\e[31m\e[1mMails sending in progress!\e[22m\e[0m\nWaiting..."
		sleep 1
	end
end

def monitor_server
	bash "tail -f #{File.join(__dir__, %w[logs {stdout,stderr}])}"
end

def dependencies_check
	bash('bundle check || bundle install') # && bash('yarn install')
end

def assets_build
	puts 'Assets not enabled.'
	true
	# bash 'yarn build', print: false
end

def ps_with_grep(pattern)
	bash "ps aux | grep #{pattern} --color", print: false
end

def server_ps
	puts
	puts 'Filewatcher:'
	puts
	ps_with_grep '[f]ilewatcher'
	puts
	puts 'Puma:'
	puts
	ps_with_grep '[p]uma[\ :]'
end

## Runtime
case ARGV[0]
when 'start'
	server :start
when 'stop'
	server :stop
	PidsFile.new(:filewatcher).kill_each.delete
when 'restart'
	server :restart
when 'phased-restart'
	server :'phased-restart'
when 'kill'
	server :stop
	bash 'pkill -f filewatcher'
	bash 'pkill -f puma'
when 'monitor'
	monitor_server
when 'devel'
	bash 'rake configs:check'
	server :restart
	if SERVER_CONFIG[ENVIRONMENT][:daemonize]
		puts 'Waiting for logs...'
		sleep 1.5
		monitor_server
	end
when 'ps', 'status'
	server_ps
else
	puts "Unknown command #{ARGV[0]}"
	puts
	show_usage
end
